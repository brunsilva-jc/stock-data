version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: crypto-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "5434:5434"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto-network

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-dashboard
    ports:
      - "8501:8501"
    environment:
      - ALPHAVANTAGE_API_KEY=${ALPHAVANTAGE_API_KEY}
      - DEFAULT_SYMBOL=${DEFAULT_SYMBOL:-BTC}
      - DEFAULT_MARKET=${DEFAULT_MARKET:-USD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    env_file:
      - .env
    volumes:
      # Mount code for development (comment out for production)
      - ./streamlit_app.py:/app/streamlit_app.py
      - ./app:/app/app
      - ./assets:/app/assets
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crypto-network

  # Optional: FastAPI service (uncomment if needed)
  # fastapi:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: crypto-api
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - ALPHAVANTAGE_API_KEY=${ALPHAVANTAGE_API_KEY}
  #     - DEFAULT_SYMBOL=${DEFAULT_SYMBOL:-BTC}
  #     - DEFAULT_MARKET=${DEFAULT_MARKET:-USD}
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./app:/app/app
  #   restart: unless-stopped
  #   command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
  #   networks:
  #     - crypto-network

networks:
  crypto-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
